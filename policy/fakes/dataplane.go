// This file was generated by counterfeiter
package fakes

import "sync"

type Dataplane struct {
	AddEndpointStub        func(ip string, epg string, wireid string) error
	addEndpointMutex       sync.RWMutex
	addEndpointArgsForCall []struct {
		ip     string
		epg    string
		wireid string
	}
	addEndpointReturns struct {
		result1 error
	}
	DeleteEndpointStub        func(ip string) error
	deleteEndpointMutex       sync.RWMutex
	deleteEndpointArgsForCall []struct {
		ip string
	}
	deleteEndpointReturns struct {
		result1 error
	}
	AddPolicyStub        func(sepgId, sourcePort, depgId, destPort, protocol, action string) (err error)
	addPolicyMutex       sync.RWMutex
	addPolicyArgsForCall []struct {
		sepgId     string
		sourcePort string
		depgId     string
		destPort   string
		protocol   string
		action     string
	}
	addPolicyReturns struct {
		result1 error
	}
	DeletePolicyStub        func(sepgId, sourcePort, depgId, destPort, protocol string) error
	deletePolicyMutex       sync.RWMutex
	deletePolicyArgsForCall []struct {
		sepgId     string
		sourcePort string
		depgId     string
		destPort   string
		protocol   string
	}
	deletePolicyReturns struct {
		result1 error
	}
	InitStub        func(Url string) error
	initMutex       sync.RWMutex
	initArgsForCall []struct {
		Url string
	}
	initReturns struct {
		result1 error
	}
	IdStub        func() string
	idMutex       sync.RWMutex
	idArgsForCall []struct{}
	idReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Dataplane) AddEndpoint(ip string, epg string, wireid string) error {
	fake.addEndpointMutex.Lock()
	fake.addEndpointArgsForCall = append(fake.addEndpointArgsForCall, struct {
		ip     string
		epg    string
		wireid string
	}{ip, epg, wireid})
	fake.recordInvocation("AddEndpoint", []interface{}{ip, epg, wireid})
	fake.addEndpointMutex.Unlock()
	if fake.AddEndpointStub != nil {
		return fake.AddEndpointStub(ip, epg, wireid)
	} else {
		return fake.addEndpointReturns.result1
	}
}

func (fake *Dataplane) AddEndpointCallCount() int {
	fake.addEndpointMutex.RLock()
	defer fake.addEndpointMutex.RUnlock()
	return len(fake.addEndpointArgsForCall)
}

func (fake *Dataplane) AddEndpointArgsForCall(i int) (string, string, string) {
	fake.addEndpointMutex.RLock()
	defer fake.addEndpointMutex.RUnlock()
	return fake.addEndpointArgsForCall[i].ip, fake.addEndpointArgsForCall[i].epg, fake.addEndpointArgsForCall[i].wireid
}

func (fake *Dataplane) AddEndpointReturns(result1 error) {
	fake.AddEndpointStub = nil
	fake.addEndpointReturns = struct {
		result1 error
	}{result1}
}

func (fake *Dataplane) DeleteEndpoint(ip string) error {
	fake.deleteEndpointMutex.Lock()
	fake.deleteEndpointArgsForCall = append(fake.deleteEndpointArgsForCall, struct {
		ip string
	}{ip})
	fake.recordInvocation("DeleteEndpoint", []interface{}{ip})
	fake.deleteEndpointMutex.Unlock()
	if fake.DeleteEndpointStub != nil {
		return fake.DeleteEndpointStub(ip)
	} else {
		return fake.deleteEndpointReturns.result1
	}
}

func (fake *Dataplane) DeleteEndpointCallCount() int {
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	return len(fake.deleteEndpointArgsForCall)
}

func (fake *Dataplane) DeleteEndpointArgsForCall(i int) string {
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	return fake.deleteEndpointArgsForCall[i].ip
}

func (fake *Dataplane) DeleteEndpointReturns(result1 error) {
	fake.DeleteEndpointStub = nil
	fake.deleteEndpointReturns = struct {
		result1 error
	}{result1}
}

func (fake *Dataplane) AddPolicy(sepgId string, sourcePort string, depgId string, destPort string, protocol string, action string) (err error) {
	fake.addPolicyMutex.Lock()
	fake.addPolicyArgsForCall = append(fake.addPolicyArgsForCall, struct {
		sepgId     string
		sourcePort string
		depgId     string
		destPort   string
		protocol   string
		action     string
	}{sepgId, sourcePort, depgId, destPort, protocol, action})
	fake.recordInvocation("AddPolicy", []interface{}{sepgId, sourcePort, depgId, destPort, protocol, action})
	fake.addPolicyMutex.Unlock()
	if fake.AddPolicyStub != nil {
		return fake.AddPolicyStub(sepgId, sourcePort, depgId, destPort, protocol, action)
	} else {
		return fake.addPolicyReturns.result1
	}
}

func (fake *Dataplane) AddPolicyCallCount() int {
	fake.addPolicyMutex.RLock()
	defer fake.addPolicyMutex.RUnlock()
	return len(fake.addPolicyArgsForCall)
}

func (fake *Dataplane) AddPolicyArgsForCall(i int) (string, string, string, string, string, string) {
	fake.addPolicyMutex.RLock()
	defer fake.addPolicyMutex.RUnlock()
	return fake.addPolicyArgsForCall[i].sepgId, fake.addPolicyArgsForCall[i].sourcePort, fake.addPolicyArgsForCall[i].depgId, fake.addPolicyArgsForCall[i].destPort, fake.addPolicyArgsForCall[i].protocol, fake.addPolicyArgsForCall[i].action
}

func (fake *Dataplane) AddPolicyReturns(result1 error) {
	fake.AddPolicyStub = nil
	fake.addPolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *Dataplane) DeletePolicy(sepgId string, sourcePort string, depgId string, destPort string, protocol string) error {
	fake.deletePolicyMutex.Lock()
	fake.deletePolicyArgsForCall = append(fake.deletePolicyArgsForCall, struct {
		sepgId     string
		sourcePort string
		depgId     string
		destPort   string
		protocol   string
	}{sepgId, sourcePort, depgId, destPort, protocol})
	fake.recordInvocation("DeletePolicy", []interface{}{sepgId, sourcePort, depgId, destPort, protocol})
	fake.deletePolicyMutex.Unlock()
	if fake.DeletePolicyStub != nil {
		return fake.DeletePolicyStub(sepgId, sourcePort, depgId, destPort, protocol)
	} else {
		return fake.deletePolicyReturns.result1
	}
}

func (fake *Dataplane) DeletePolicyCallCount() int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return len(fake.deletePolicyArgsForCall)
}

func (fake *Dataplane) DeletePolicyArgsForCall(i int) (string, string, string, string, string) {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return fake.deletePolicyArgsForCall[i].sepgId, fake.deletePolicyArgsForCall[i].sourcePort, fake.deletePolicyArgsForCall[i].depgId, fake.deletePolicyArgsForCall[i].destPort, fake.deletePolicyArgsForCall[i].protocol
}

func (fake *Dataplane) DeletePolicyReturns(result1 error) {
	fake.DeletePolicyStub = nil
	fake.deletePolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *Dataplane) Init(Url string) error {
	fake.initMutex.Lock()
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
		Url string
	}{Url})
	fake.recordInvocation("Init", []interface{}{Url})
	fake.initMutex.Unlock()
	if fake.InitStub != nil {
		return fake.InitStub(Url)
	} else {
		return fake.initReturns.result1
	}
}

func (fake *Dataplane) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *Dataplane) InitArgsForCall(i int) string {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return fake.initArgsForCall[i].Url
}

func (fake *Dataplane) InitReturns(result1 error) {
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 error
	}{result1}
}

func (fake *Dataplane) Id() string {
	fake.idMutex.Lock()
	fake.idArgsForCall = append(fake.idArgsForCall, struct{}{})
	fake.recordInvocation("Id", []interface{}{})
	fake.idMutex.Unlock()
	if fake.IdStub != nil {
		return fake.IdStub()
	} else {
		return fake.idReturns.result1
	}
}

func (fake *Dataplane) IdCallCount() int {
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	return len(fake.idArgsForCall)
}

func (fake *Dataplane) IdReturns(result1 string) {
	fake.IdStub = nil
	fake.idReturns = struct {
		result1 string
	}{result1}
}

func (fake *Dataplane) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addEndpointMutex.RLock()
	defer fake.addEndpointMutex.RUnlock()
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	fake.addPolicyMutex.RLock()
	defer fake.addPolicyMutex.RUnlock()
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	return fake.invocations
}

func (fake *Dataplane) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
